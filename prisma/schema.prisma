// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  season      String
  coachPitch  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  players     Player[]
  games       Game[]
  gameRules   GameRule[]

  @@map("teams")
}

model Player {
  id          String   @id @default(cuid())
  teamId      String
  name        String
  jerseyNumber String?
  skillLevel  Int      @default(3) // 1-5 scale
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  positionPreferences PlayerPositionPreference[]
  startingPositions PlayerStartingPosition[]
  battingLineups LineupBatting[]
  fieldingLineups LineupFielding[]

  @@map("players")
}

model PlayerPositionPreference {
  id             String   @id @default(cuid())
  playerId       String
  position       String
  preferenceLevel Int      @default(3) // 1-5 scale (5=primary, 4=secondary, 3=tertiary, 2=quaternary, 1=avoid, 0=n/a)
  allowed        Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  player         Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("player_position_preferences")
}

model PlayerStartingPosition {
  id             String   @id @default(cuid())
  playerId       String
  opponentLevel  String   // "strong", "average", "weak"
  position       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  player         Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("player_starting_positions")
  @@unique([playerId, opponentLevel])
}

model Game {
  id                String   @id @default(cuid())
  teamId            String
  opponentName      String
  gameDate          DateTime
  location          String?
  opponentDifficulty Int      @default(3) // 1-5 scale
  outfielderCount   Int      @default(4)
  playerCount       Int
  notes             String?
  result            String?
  isHome            Boolean  @default(true)  // Add this to indicate home/away game
  isTournament      Boolean  @default(false) // Add this to indicate tournament game
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  team              Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  battingLineups    LineupBatting[]
  fieldingLineups   LineupFielding[]

  @@map("games")
}

model LineupBatting {
  id          String   @id @default(cuid())
  gameId      String
  playerId    String
  battingOrder Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player      Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("lineup_batting")
}

model LineupFielding {
  id          String   @id @default(cuid())
  gameId      String
  playerId    String
  inning      Int
  position    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player      Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("lineup_fielding")
}

model GameRule {
  id                String   @id @default(cuid())
  teamId            String
  opponentDifficulty Int
  ruleType          String
  ruleValue         Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  team              Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("game_rules")
}